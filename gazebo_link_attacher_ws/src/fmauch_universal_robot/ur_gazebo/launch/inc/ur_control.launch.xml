<?xml version="1.0"?>
<launch>
  <!--
    This file 'pretends' to load a driver for a UR robot, by accepting similar
    arguments and playing a similar role (ie: starting the driver node (in this
    case Gazebo) and loading the ros_control controllers).

    Some of the arguments to this .launch file will be familiar to those using
    the ur_robot_driver with their robot.

    Other parameters are specific to Gazebo.

    Note: we spawn and start the ros_control controllers here, as they are,
    together with gazebo_ros_control, essentially the replacement for the
    driver which would be used with a real robot.
  -->

  <!-- Parameters we share with ur_robot_driver -->
  <arg name="controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller"/>
  <arg name="stopped_controllers" default="joint_group_pos_controller"/>

  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <!-- <arg name="gazebo_world" default="$(find gazebo_ros_link_attacher)/worlds/battery_pack_camera.world" doc="The '.world' file to load in Gazebo." /> -->
  <arg name="gazebo_world" default="$(find gazebo_ros_link_attacher)/worlds/test_attacher.world" doc="The '.world' file to load in Gazebo." />
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
  <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.3" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <param name="M6_sleeve_description" textfile="$(find M6_sleeve)/urdf/M6_sleeve.urdf" />
  <param name="M8_sleeve_description" textfile="$(find M8_sleeve)/urdf/M8_sleeve.urdf" />
  <param name="M10_sleeve_description" textfile="$(find M10_sleeve)/urdf/M10_sleeve.urdf" />
  <param name="hexagon_sleeve_description" textfile="$(find hexagon_sleeve)/urdf/hexagon_sleeve.urdf" />
  <param name="star_sleeve_description" textfile="$(find star_sleeve)/urdf/star_sleeve.urdf" />
  <param name="cross_sleeve_description" textfile="$(find cross_sleeve)/urdf/cross_sleeve.urdf" />
  <param name="hexagon_bolt_description" textfile="$(find hexagon_bolt)/urdf/hexagon_bolt.urdf" />
  <param name="M6_bolt_description" textfile="$(find M6_bolt)/urdf/M6_bolt.urdf" />
  <param name="M8_bolt_description" textfile="$(find M8_bolt)/urdf/M8_bolt.urdf" />
  <param name="M10_bolt_description" textfile="$(find M10_bolt)/urdf/M10_bolt.urdf" />
  <param name="star_bolt_description" textfile="$(find star_bolt)/urdf/star_bolt.urdf" />
  <param name="cross_bolt_description" textfile="$(find cross_bolt)/urdf/cross_bolt.urdf" />

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)"
    output="screen" respawn="false" />
  
  <node pkg="gazebo_ros" type="spawn_model" name="M6_sleeve"  
    args="
      -urdf -model M6_sleeve -param M6_sleeve_description
      -x 0.450000 -y -0.035743 -z 0.361520
      -R -3.070011 -P 1.569173 -Y -1.318157"
    output="screen" respawn="false"/>
  <node pkg="gazebo_ros" type="spawn_model" name="M8_sleeve"   
    args="
      -urdf -model M8_sleeve -param M8_sleeve_description
      -x 0.475287 -y -0.025291 -z 0.361323
      -R 2.371931 -P 1.568935 -Y 1.662290"
    output="screen" respawn="false"/>
  <node pkg="gazebo_ros" type="spawn_model" name="M10_sleeve" 
    args="
      -urdf -model M10_sleeve -param M10_sleeve_description
      -x 0.485757 -y -0.000001 -z 0.361106
      -R -0.176915 -P 1.569842 -Y 0.513549"
    output="screen" respawn="false" />
    <node pkg="gazebo_ros" type="spawn_model" name="hexagon_sleeve_sleeve"  
    args="
      -urdf -model hexagon_sleeve -param hexagon_sleeve_description
      -x 0.424660 -y 0.025289 -z 0.356438
      -R -0.411018 -P 1.566303 -Y 3.107694"
    output="screen" respawn="false"/>
  <node pkg="gazebo_ros" type="spawn_model" name="star_sleeve_sleeve"   
    args="
      -urdf -model star_sleeve -param star_sleeve_description
      -x 0.414244 -y -0.000032 -z 0.357269
      -R 1.146761 -P 1.567547 -Y -1.365673"
    output="screen" respawn="false"/>
  <node pkg="gazebo_ros" type="spawn_model" name="cross_sleeve_sleeve" 
    args="
      -urdf -model cross_sleeve -param cross_sleeve_description
      -x 0.424778 -y -0.025328 -z 0.347731
      -R 2.224413 -P 1.567029 -Y -0.550571"
    output="screen" respawn="false" />
    <node pkg="gazebo_ros" type="spawn_model" name="hexagon_bolt" 
    args="
      -urdf -model hexagon_bolt -param hexagon_bolt_description
      -x 0.396753 -y 0.521242 -z 0.343655
      -R 1.949890 -P 1.570616 -Y 0.468642"
    output="screen" respawn="false" />
    <node pkg="gazebo_ros" type="spawn_model" name="M6_bolt_1" 
    args="
      -urdf -model M6_bolt_1 -param M6_bolt_description
      -x -0.403971 -y 0.521573 -z 0.346916
      -R -3.140464 -P 0.000033 -Y 2.833937"
    output="screen" respawn="false" />
    <!-- <node pkg="gazebo_ros" type="spawn_model" name="M6_bolt_2" 
    args="
      -urdf -model M6_bolt_2 -param M6_bolt_description
      -x -0.304001 -y 0.521582 -z 0.346912
     -R 3.141462 -P 0.000335 -Y 1.399991"
    output="screen" respawn="false" /> -->
    <node pkg="gazebo_ros" type="spawn_model" name="M8_bolt_1" 
    args="
      -urdf -model M8_bolt_1 -param M8_bolt_description
      -x -0.103997 -y 0.521421 -z 0.346910
      -R -3.141432 -P -0.000113 -Y 1.412325"
    output="screen" respawn="false" />
    <!-- <node pkg="gazebo_ros" type="spawn_model" name="M8_bolt_2" 
    args="
      -urdf -model M8_bolt_2 -param M8_bolt_description
      -x -0.004044 -y 0.521484 -z 0.346319
      -R 3.141511 -P -0.000037 -Y 0.431430"
    output="screen" respawn="false" /> -->
    <node pkg="gazebo_ros" type="spawn_model" name="M10_bolt_1" 
    args="
      -urdf -model M10_bolt_1 -param M10_bolt_description
      -x 0.196006 -y 0.521508 -z 0.345949
      -R 3.141565 -P -0.000092 -Y -0.133533"
    output="screen" respawn="false" />
    <!-- <node pkg="gazebo_ros" type="spawn_model" name="M10_bolt_2" 
    args="
      -urdf -model M10_bolt_2 -param M10_bolt_description
      -x 0.296006 -y 0.521508 -z 0.345949
      -R 3.141565 -P -0.000092 -Y -0.133533"
    output="screen" respawn="false" /> -->
    <node pkg="gazebo_ros" type="spawn_model" name="cross_bolt" 
    args="
      -urdf -model cross_bolt -param cross_bolt_description
      -x -0.203720 -y 0.521460 -z 0.350499
      -R 3.070033 -P 1.570673 -Y -0.251191"
    output="screen" respawn="false" />
    <node pkg="gazebo_ros" type="spawn_model" name="star_bolt" 
    args="
      -urdf -model star_bolt -param star_bolt_description
      -x 0.095408 -y 0.521450 -z 0.341331
      -R 1.713656 -P 1.569896 -Y -2.756235"
    output="screen" respawn="false" />

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
